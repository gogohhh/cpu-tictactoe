{"version":3,"sources":["Board.js","Square.js","App.js","reportWebVitals.js","index.js"],"names":["Board","props","className","Square","x","o","App","lines","useState","Array","fill","squares","setSqueares","ganar","setGanar","useEffect","turnoCPU","filter","square","length","paraGanar","a","b","c","squareIndexes","squareValues","map","index","JSON","stringify","sort","mismoIndex","val","ganador","CPUganador","putCPU","newSquares","lineaGanadora","bloquearLineas","continuarLinea","Math","ceil","random","onClick","handleSquareClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f81f40da.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Board(props){\n    return(\n        <div className=\"board\" {...props} />\n    );\n}\n\nexport default Board;","\nfunction Square(props){\n    return(\n        <div className={'square'} {...props} >\n            {props.x ? 'X' : (props.o ? 'O' : '') }\n        </div>\n    );\n}\n\nexport default Square;","import './App.css';\nimport { useState, useEffect } from 'react';\nimport Board from './Board.js';\nimport Square from './Square';\n\nconst defaultSquares = () => (new Array(9)).fill(null);\n\nfunction App() {\n\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ]\n\n  const [squares, setSqueares] = useState(defaultSquares());\n\n  const [ganar, setGanar] = useState(null);\n\n  useEffect( () => {\n    const turnoCPU = squares.filter(square => square !== null).length % 2 === 1;\n\n    const paraGanar = (a, b, c) =>{ \n      return lines.filter( squareIndexes => {\n        const squareValues = squareIndexes.map(index => squares[index]);\n        return JSON.stringify( [a, b, c].sort()) === JSON.stringify(squareValues.sort());\n      });\n    };\n\n    const mismoIndex = squares.map(( square, index  ) => square === null ? index : null).filter( val => val !== null);\n\n    const ganador = paraGanar( 'X', 'X', 'X').length > 0;\n    const CPUganador = paraGanar( 'O', 'O', 'O').length > 0;\n    \n    if(ganador){\n      setGanar('X');\n    }\n\n    if(CPUganador){\n      setGanar('O');\n    }\n\n    const putCPU = index => {\n      let newSquares = squares;\n      newSquares[index] = 'O';\n      setSqueares( [...newSquares] );\n    };\n\n    if(turnoCPU){\n\n      const lineaGanadora = paraGanar( 'O', 'O', null ); /** El turno de la CPU debe buscar la victoria primero, despues bloquear */\n      if(lineaGanadora.length > 0){\n        const posicionGanadora = lineaGanadora[0].filter(index => squares[index] === null)[0];\n        putCPU(posicionGanadora);\n        return;\n      }\n\n      const bloquearLineas = paraGanar( 'X', 'X', null ); /** Si el jugador esta por ganar, la cpu tira en ese espacio */\n      if(bloquearLineas.length > 0){\n        const bloquear = bloquearLineas[0].filter(index => squares[index] === null)[0];\n        putCPU(bloquear);\n        return;\n      }\n\n\n      const continuarLinea = paraGanar( 'O', null, null );\n      if (continuarLinea.length > 0) {\n        putCPU(continuarLinea[0].filter(index => squares[index] === null)[0]);\n        return;\n      }\n      \n      const randomIndex = mismoIndex[ Math.ceil( Math.random()*mismoIndex.length ) ]\n\n      putCPU(randomIndex);\n    }\n\n  }, [squares]);\n\n\n  function handleSquareClick(index){\n    const turno = squares.filter(square => square !== null).length % 2 === 0;\n\n    if(turno){\n    let newSquares = squares;\n    newSquares[index] = 'X';\n    setSqueares( [...newSquares]);\n    }\n  }\n\n  return (\n    <div>\n      <main>\n        <div className=\"title\">\n          <h4 className=\"nombre\">Tic Tac Toe</h4>\n          <span className=\"subtitle\">Usuario: X    vs    CPU: O</span>\n        </div>\n        <Board>\n          {squares.map((square, index) => \n              \n              <Square \n                x={square==='X' ? 1 : 0}\n                o={square==='O' ? 1 : 0}\n                onClick={ () => handleSquareClick(index)} />\n            )\n          }\n        </Board>\n        {!!ganar && ganar === 'X' &&(\n          <div className='resultado usuario'>\n           ¡GANASTE!\n          </div>\n        )}\n\n        {!!ganar && ganar === 'O' &&(\n          <div className='resultado cpu'>\n            ¡PERDISTE!\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}